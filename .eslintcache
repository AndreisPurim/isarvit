[{"/home/andreis/workarea/isarvit/src/index.js":"1","/home/andreis/workarea/isarvit/src/Forms.js":"2","/home/andreis/workarea/isarvit/src/DynamicForms.js":"3","/home/andreis/workarea/isarvit/src/validators.js":"4","/home/andreis/workarea/isarvit/src/check-name.js":"5","/home/andreis/workarea/isarvit/src/special-name.js":"6","/home/andreis/workarea/isarvit/src/validate-rating.js":"7"},{"size":718,"mtime":1609007997368,"results":"8","hashOfConfig":"9"},{"size":5171,"mtime":1609008392881,"results":"10","hashOfConfig":"9"},{"size":6550,"mtime":1609004394455,"results":"11","hashOfConfig":"9"},{"size":203,"mtime":1609004532373,"results":"12","hashOfConfig":"9"},{"size":75,"mtime":1609004529563,"results":"13","hashOfConfig":"9"},{"size":82,"mtime":1608993840389,"results":"14","hashOfConfig":"9"},{"size":127,"mtime":1609008440404,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"v6xmwy",{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"19"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/home/andreis/workarea/isarvit/src/index.js",["38"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Forms from './Forms.js';\nimport logo from './logo.png';\n\nReactDOM.render(\n  <div>\n    <div style={{textAlign: \"center\"}}>\n      <img src={logo} style={{paddingTop: '1rem', width: '5%'}}/>\n      <h1>ISARVIT</h1>\n      <p>Version 0.0.2 26/12/2020</p>\n      <p>Automatic Medical Diagnosis Generator. Created by the École Centralle de Lille. <br /> Read the <a href=\"https://github.com/AndreisPurim/isarvit\">Documentation</a> or explore the first <a href=\"https://colab.research.google.com/drive/1qffKY50XG0yTuh7z_9st8_2lQpMUYGA-?usp=sharing\">prototype.</a></p>\n    </div>\n    <Forms />\n  </div>\n,document.getElementById('root'));",["39","40"],"/home/andreis/workarea/isarvit/src/Forms.js",["41","42","43","44"],"  \r\nimport React, { Component } from \"react\";\r\nimport DynamicForm from \"./DynamicForms.js\";\r\nimport Validator from './validators.js';\r\nimport QRCode from \"react-qr-code\";\r\n\r\nimport { PDFViewer, Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\r\n\r\nconst YAML = require('json-to-pretty-yaml');\r\n\r\n\r\n// Create styles\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#E4E4E4'\r\n  },\r\n  section: {\r\n    margin: 10,\r\n    padding: 10,\r\n    flexGrow: 1\r\n  }\r\n});\r\n\r\n\r\nconst Console = prop => (\r\n  console[Object.keys(prop)[0]](...Object.values(prop))\r\n  ,null // ➜ React components must return something \r\n)\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    data: [],\r\n    current: {}\r\n  };\r\n\r\n  onSubmit = model => {\r\n    let data = [];\r\n    if (model.id) {\r\n      data = this.state.data.filter(d => {\r\n        return d.id != model.id;\r\n      });\r\n    } else {\r\n      model.id = +new Date();\r\n      data = this.state.data.slice();\r\n    }\r\n    \r\n    this.setState({\r\n      data: [model, ...data],\r\n    });\r\n  };\r\n\r\n  onEdit = id => {\r\n    let record = this.state.data.find(d => {\r\n      return d.id == id;\r\n    });\r\n    //alert(JSON.stringify(record));\r\n    this.setState({\r\n      current: record\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <DynamicForm\r\n          key={this.state.current.id}\r\n          className=\"form\"\r\n          title=\"Forms (GoUpile Simulation)\"\r\n          defaultValues={this.state.current}\r\n          validators={[\r\n            {\r\n              key: \"name\", validations: [\r\n                {\r\n                  \"validator\": Validator.checkName,\r\n                  \"message\": \"Name should start with alphabets\"\r\n                },\r\n                {\r\n                  \"validator\": Validator.specialName,\r\n                  \"message\": \"Name should not contain the word superman\"\r\n                },\r\n              ]\r\n            },\r\n            {\r\n              key: \"pain\", validations: [\r\n                {\r\n                  \"validator\": Validator.validateRating,\r\n                  \"message\": \"Pain should be between 0 and 5\"\r\n                },\r\n              ]\r\n            }\r\n          ]}\r\n          model={[\r\n            { key: \"name\", label: \"Name\", props: { required: true } },\r\n            { key: \"age\", label: \"Age\", type: \"number\" },\r\n            {\r\n              key: \"gender\",\r\n              label: \"Gender\",\r\n              type: \"radio\",\r\n              options: [\r\n                { key: \"male\", label: \"Male\", name: \"gender\", value: \"male\" },\r\n                {\r\n                  key: \"female\",\r\n                  label: \"Female\",\r\n                  name: \"gender\",\r\n                  value: \"female\"\r\n                }\r\n              ]\r\n            },\r\n            { key: \"exam\", label: \"Exam Type\" },\r\n            {\r\n              key: \"pain\",\r\n              label: \"Pain scale (0 to 5)\",\r\n              type: \"number\",\r\n              props: { min: 0, max: 5 }\r\n            },\r\n            {\r\n              key: \"kidney\",\r\n              label: \"Which Kidney\",\r\n              type: \"select\",\r\n              value: \"None\",\r\n              options: [\r\n                { key: \"none\", label: \"None\", value: \"None\" },\r\n                { key: \"left\", label: \"Left\", value: \"Left\" },\r\n                { key: \"right\", label: \"Right\", value: \"Right\" },\r\n                { key: \"both\", label: \"Both\", value: \"Both\" }\r\n              ]\r\n            },\r\n            {\r\n              key: \"habits\",\r\n              label: \"Habits / Antecedents\",\r\n              type: \"checkbox\",\r\n              options: [\r\n                { key: \"smoker\", label: \"Smoker\", value: \"Smoker\" },\r\n                { key: \"drugs\", label: \"Drug Abuse\", value: \"Drug Abuse\" },\r\n                { key: \"surgery\", label: \"Surgery\", value: \"Surgery\" }\r\n              ]\r\n            }\r\n          ]}\r\n          onSubmit={model => {\r\n            this.onSubmit(model);\r\n          }}\r\n        />\r\n        <div className=\"centerText\">Resulting YAML:</div>\r\n        <pre style={{paddingLeft: \"22rem\"}}>{YAML.stringify(this.state.data[0])}</pre>\r\n        <div className=\"centerText\">Resulting QRCode:</div>\r\n        <div className=\"centerText\" >\r\n        <QRCode value={YAML.stringify(this.state.data[0])}/>\r\n        </div>\r\n        <div className=\"centerText\">Resulting PDF (simulation):</div>\r\n        <div style={{ textAlign: \"center\"}}>\r\n            <PDFViewer>\r\n                <Document>\r\n                    <Page size=\"A4\" style={styles.page}>\r\n                    <View style={styles.section}>\r\n                        <Text>Mr/Mrs [NAME] [SURNAME]</Text>\r\n                        <Text>Date of birth: [DATE]</Text>\r\n                        <Text>...</Text>\r\n                        <Text>Exam: [EXAM]</Text>\r\n                        <Text>...</Text>\r\n                        <Text>Condition:</Text>\r\n                        <Text>Pain in the [WHERE]</Text>\r\n                        <Text>...</Text>\r\n                    </View>\r\n                    </Page>\r\n                </Document>\r\n            </PDFViewer>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","/home/andreis/workarea/isarvit/src/DynamicForms.js",["45","46","47","48","49","50","51","52","53","54","55"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nexport default class DynamicForm extends React.Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    console.log(\"gds:p:s\", nextProps.defaultValues, prevState);\r\n\r\n    let derivedState = {};\r\n\r\n    if (\r\n      nextProps.defaultValues &&\r\n      nextProps.defaultValues.id !== prevState.id\r\n    ) {\r\n      //   Object.keys(prevState).forEach(k => {\r\n      //     derivedState[k] = \"\";\r\n      //   });\r\n      return {\r\n        ...nextProps.defaultValues\r\n      };\r\n    }\r\n\r\n    console.log(\"no state change\");\r\n    return null;\r\n  }\r\n\r\n  // Validate form fields (This is configured in DynamicForm as props)\r\n  validate = () => {\r\n    let errors = {};\r\n    const validators = this.props.validators;\r\n    console.log(validators);\r\n    validators.forEach((v) => {\r\n      console.log(v);\r\n      let fieldValue = this.state[v.key];\r\n      console.log(`validating ${v.key}`);\r\n      v.validations.forEach((vd) => {\r\n        let r = vd.validator(fieldValue);\r\n        if (!r) {\r\n          if (errors[v.key] == undefined) {\r\n            errors[v.key] = [];\r\n          }\r\n          //errors.push(`${v.key} ${vd.message}`)\r\n          // errors.push({\r\n          //   [v.key]:  vd.message\r\n          // });\r\n          errors[v.key].push(vd.message);\r\n        }\r\n      }); \r\n    })\r\n\r\n    console.log(\"ERRORS: \", errors);\r\n\r\n    return errors;\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    let errors = this.validate();\r\n    if (Object.entries(errors).length !== 0) {\r\n      alert(JSON.stringify(errors));\r\n      return false;\r\n    }\r\n    if (this.props.onSubmit) this.props.onSubmit(this.state);\r\n  };\r\n\r\n  onChange = (e, key, type = \"single\") => {\r\n    //console.log(`${key} changed ${e.target.value} type ${type}`);\r\n    if (type === \"single\") {\r\n      this.setState(\r\n        {\r\n          [key]: e.target.value\r\n        },\r\n        () => {}\r\n      );\r\n    } else {\r\n      // Array of values (e.g. checkbox): TODO: Optimization needed.\r\n      let found = this.state[key]\r\n        ? this.state[key].find(d => d === e.target.value)\r\n        : false;\r\n\r\n      if (found) {\r\n        let data = this.state[key].filter(d => {\r\n          return d !== found;\r\n        });\r\n        this.setState({\r\n          [key]: data\r\n        });\r\n      } else {\r\n        console.log(\"found\", key, this.state[key]);\r\n        // this.setState({\r\n        //   [key]: [e.target.value, ...this.state[key]]\r\n        // });\r\n        let others = this.state[key] ? [...this.state[key]] : [];\r\n        this.setState({\r\n          [key]: [e.target.value, ...others]\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  renderForm = () => {\r\n    let model = this.props.model;\r\n    let defaultValues = this.props.defaultValues;\r\n\r\n    let formUI = model.map(m => {\r\n      let key = m.key;\r\n      let type = m.type || \"text\";\r\n      let props = m.props || {};\r\n      let name = m.name;\r\n      let value = m.value;\r\n\r\n      let target = key;\r\n      value = this.state[target] || \"\";\r\n\r\n      let input = (\r\n        <input\r\n          {...props}\r\n          className=\"form-input\"\r\n          type={type}\r\n          key={key}\r\n          name={name}\r\n          value={value}\r\n          onChange={e => {\r\n            this.onChange(e, target);\r\n          }}\r\n        />\r\n      );\r\n\r\n      if (type == \"radio\") {\r\n        input = m.options.map(o => {\r\n          let checked = o.value == value;\r\n          return (\r\n            <React.Fragment key={\"fr\" + o.key}>\r\n              <input\r\n                {...props}\r\n                className=\"form-input\"\r\n                type={type}\r\n                key={o.key}\r\n                name={o.name}\r\n                checked={checked}\r\n                value={o.value}\r\n                onChange={e => {\r\n                  this.onChange(e, o.name);\r\n                }}\r\n              />\r\n              <label key={\"ll\" + o.key}>{o.label}</label>\r\n            </React.Fragment>\r\n          );\r\n        });\r\n        input = <div className=\"form-group-radio\">{input}</div>;\r\n      }\r\n\r\n      if (type == \"select\") {\r\n        input = m.options.map(o => {\r\n          let checked = o.value == value;\r\n          //console.log(\"select: \", o.value, value);\r\n          return (\r\n            <option\r\n              {...props}\r\n              className=\"form-input\"\r\n              key={o.key}\r\n              value={o.value}\r\n            >\r\n              {o.value}\r\n            </option>\r\n          );\r\n        });\r\n\r\n        //console.log(\"Select default: \", value);\r\n        input = (\r\n          <select\r\n            value={value}\r\n            onChange={e => {\r\n              this.onChange(e, m.key);\r\n            }}\r\n          >\r\n            {input}\r\n          </select>\r\n        );\r\n      }\r\n\r\n      if (type == \"checkbox\") {\r\n        input = m.options.map(o => {\r\n          //let checked = o.value == value;\r\n          let checked = false;\r\n          if (value && value.length > 0) {\r\n            checked = value.indexOf(o.value) > -1 ? true : false;\r\n          }\r\n          //console.log(\"Checkbox: \", checked);\r\n          return (\r\n            <React.Fragment key={\"cfr\" + o.key}>\r\n              <input\r\n                {...props}\r\n                className=\"form-input\"\r\n                type={type}\r\n                key={o.key}\r\n                name={o.name}\r\n                checked={checked}\r\n                value={o.value}\r\n                onChange={e => {\r\n                  this.onChange(e, m.key, \"multiple\");\r\n                }}\r\n              />\r\n              <label key={\"ll\" + o.key}>{o.label}</label>\r\n            </React.Fragment>\r\n          );\r\n        });\r\n\r\n        input = <div className=\"form-group-checkbox\">{input}</div>;\r\n      }\r\n\r\n      return (\r\n        <div key={\"g\" + key} className=\"form-group\">\r\n          <label className=\"form-label\" key={\"l\" + key} htmlFor={key}>\r\n            {m.label}\r\n          </label>\r\n          {input}\r\n        </div>\r\n      );\r\n    });\r\n    return formUI;\r\n  };\r\n\r\n  render() {\r\n    let title = this.props.title || \"Dynamic Form\";\r\n\r\n    return (\r\n      <div className={this.props.className}>\r\n        <h3 className=\"form-title\">{title}</h3>\r\n        <form\r\n          className=\"dynamic-form\"\r\n          onSubmit={e => {\r\n            this.onSubmit(e);\r\n          }}\r\n        >\r\n          {this.renderForm()}\r\n          <div className=\"form-actions\">\r\n            <button type=\"submit\">submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}","/home/andreis/workarea/isarvit/src/validators.js",["56"],"import checkName from './check-name';\r\nimport specialName from './special-name';\r\nimport validateRating from './validate-rating';\r\n\r\nexport default  {\r\n  checkName,\r\n  specialName,\r\n  validateRating\r\n}\r\n","/home/andreis/workarea/isarvit/src/check-name.js",["57"],"export default function (input) {\r\n    return (/^[A-Z]/i.test(input));\r\n  }","/home/andreis/workarea/isarvit/src/special-name.js",["58","59"],"export default function (input) {\r\n    return input.indexOf(\"superman\") == -1;\r\n }","/home/andreis/workarea/isarvit/src/validate-rating.js",["60"],"export default function (input) {\r\n    let parsedInput = Number(input);\r\n    return (parsedInput >= 0 && parsedInput <=5);\r\n  }",{"ruleId":"61","severity":1,"message":"62","line":11,"column":7,"nodeType":"63","endLine":11,"endColumn":66},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":26,"column":7,"nodeType":"70","messageId":"71","endLine":26,"endColumn":14},{"ruleId":"72","severity":1,"message":"73","line":28,"column":3,"nodeType":"74","messageId":"75","endLine":28,"endColumn":4},{"ruleId":"76","severity":1,"message":"77","line":41,"column":21,"nodeType":"78","messageId":"79","endLine":41,"endColumn":23},{"ruleId":"76","severity":1,"message":"80","line":55,"column":19,"nodeType":"78","messageId":"79","endLine":55,"endColumn":21},{"ruleId":"68","severity":1,"message":"81","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":16},{"ruleId":"82","severity":1,"message":"83","line":6,"column":3,"nodeType":"84","messageId":"85","endLine":8,"endColumn":4},{"ruleId":"68","severity":1,"message":"86","line":13,"column":9,"nodeType":"70","messageId":"71","endLine":13,"endColumn":21},{"ruleId":"76","severity":1,"message":"80","line":43,"column":29,"nodeType":"78","messageId":"79","endLine":43,"endColumn":31},{"ruleId":"68","severity":1,"message":"87","line":107,"column":9,"nodeType":"70","messageId":"71","endLine":107,"endColumn":22},{"ruleId":"76","severity":1,"message":"80","line":133,"column":16,"nodeType":"78","messageId":"79","endLine":133,"endColumn":18},{"ruleId":"76","severity":1,"message":"80","line":135,"column":33,"nodeType":"78","messageId":"79","endLine":135,"endColumn":35},{"ruleId":"76","severity":1,"message":"80","line":157,"column":16,"nodeType":"78","messageId":"79","endLine":157,"endColumn":18},{"ruleId":"68","severity":1,"message":"88","line":159,"column":15,"nodeType":"70","messageId":"71","endLine":159,"endColumn":22},{"ruleId":"76","severity":1,"message":"80","line":159,"column":33,"nodeType":"78","messageId":"79","endLine":159,"endColumn":35},{"ruleId":"76","severity":1,"message":"80","line":186,"column":16,"nodeType":"78","messageId":"79","endLine":186,"endColumn":18},{"ruleId":"89","severity":1,"message":"90","line":5,"column":1,"nodeType":"91","endLine":9,"endColumn":2},{"ruleId":"89","severity":1,"message":"92","line":1,"column":1,"nodeType":"91","endLine":3,"endColumn":4},{"ruleId":"89","severity":1,"message":"92","line":1,"column":1,"nodeType":"91","endLine":3,"endColumn":3},{"ruleId":"76","severity":1,"message":"80","line":2,"column":38,"nodeType":"78","messageId":"79","endLine":2,"endColumn":40},{"ruleId":"89","severity":1,"message":"92","line":1,"column":1,"nodeType":"91","endLine":4,"endColumn":4},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'Console' is assigned a value but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'ReactDOM' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'derivedState' is assigned a value but never used.","'defaultValues' is assigned a value but never used.","'checked' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous function","no-global-assign","no-unsafe-negation"]